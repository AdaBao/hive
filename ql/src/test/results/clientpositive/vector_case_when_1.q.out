PREHOOK: query: CREATE TABLE lineitem_test_txt (L_ORDERKEY      INT,
                                L_PARTKEY       INT,
                                L_SUPPKEY       INT,
                                L_LINENUMBER    INT,
                                L_QUANTITY      INT,
                                L_EXTENDEDPRICE DOUBLE,
                                L_DISCOUNT      DOUBLE,
                                L_TAX           DECIMAL(10,2),
                                L_RETURNFLAG    CHAR(1),
                                L_LINESTATUS    CHAR(1),
                                l_shipdate      DATE,
                                L_COMMITDATE    DATE,
                                L_RECEIPTDATE   DATE,
                                L_SHIPINSTRUCT  VARCHAR(20),
                                L_SHIPMODE      CHAR(10),
                                L_COMMENT       STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@lineitem_test_txt
POSTHOOK: query: CREATE TABLE lineitem_test_txt (L_ORDERKEY      INT,
                                L_PARTKEY       INT,
                                L_SUPPKEY       INT,
                                L_LINENUMBER    INT,
                                L_QUANTITY      INT,
                                L_EXTENDEDPRICE DOUBLE,
                                L_DISCOUNT      DOUBLE,
                                L_TAX           DECIMAL(10,2),
                                L_RETURNFLAG    CHAR(1),
                                L_LINESTATUS    CHAR(1),
                                l_shipdate      DATE,
                                L_COMMITDATE    DATE,
                                L_RECEIPTDATE   DATE,
                                L_SHIPINSTRUCT  VARCHAR(20),
                                L_SHIPMODE      CHAR(10),
                                L_COMMENT       STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@lineitem_test_txt
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/lineitem.txt' OVERWRITE INTO TABLE lineitem_test_txt
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@lineitem_test_txt
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/lineitem.txt' OVERWRITE INTO TABLE lineitem_test_txt
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@lineitem_test_txt
PREHOOK: query: CREATE TABLE lineitem_test STORED AS ORC AS SELECT * FROM lineitem_test_txt
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@lineitem_test_txt
PREHOOK: Output: database:default
PREHOOK: Output: default@lineitem_test
POSTHOOK: query: CREATE TABLE lineitem_test STORED AS ORC AS SELECT * FROM lineitem_test_txt
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@lineitem_test_txt
POSTHOOK: Output: database:default
POSTHOOK: Output: default@lineitem_test
POSTHOOK: Lineage: lineitem_test.l_comment SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_comment, type:string, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_commitdate SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_commitdate, type:date, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_discount SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_discount, type:double, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_extendedprice SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_extendedprice, type:double, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_linenumber SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_linenumber, type:int, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_linestatus SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_linestatus, type:char(1), comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_orderkey SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_orderkey, type:int, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_partkey SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_partkey, type:int, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_quantity SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_quantity, type:int, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_receiptdate SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_receiptdate, type:date, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_returnflag SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_returnflag, type:char(1), comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_shipdate SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_shipdate, type:date, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_shipinstruct SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_shipinstruct, type:varchar(20), comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_shipmode SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_shipmode, type:char(10), comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_suppkey SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_suppkey, type:int, comment:null), ]
POSTHOOK: Lineage: lineitem_test.l_tax SIMPLE [(lineitem_test_txt)lineitem_test_txt.FieldSchema(name:l_tax, type:decimal(10,2), comment:null), ]
lineitem_test_txt.l_orderkey	lineitem_test_txt.l_partkey	lineitem_test_txt.l_suppkey	lineitem_test_txt.l_linenumber	lineitem_test_txt.l_quantity	lineitem_test_txt.l_extendedprice	lineitem_test_txt.l_discount	lineitem_test_txt.l_tax	lineitem_test_txt.l_returnflag	lineitem_test_txt.l_linestatus	lineitem_test_txt.l_shipdate	lineitem_test_txt.l_commitdate	lineitem_test_txt.l_receiptdate	lineitem_test_txt.l_shipinstruct	lineitem_test_txt.l_shipmode	lineitem_test_txt.l_comment
PREHOOK: query: INSERT INTO TABLE lineitem_test VALUES (NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
PREHOOK: type: QUERY
PREHOOK: Output: default@lineitem_test
POSTHOOK: query: INSERT INTO TABLE lineitem_test VALUES (NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
POSTHOOK: type: QUERY
POSTHOOK: Output: default@lineitem_test
POSTHOOK: Lineage: lineitem_test.l_comment SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col16, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_commitdate EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col12, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_discount EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col7, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_extendedprice EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col6, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_linenumber EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col4, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_linestatus EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col10, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_orderkey EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_partkey EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_quantity EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col5, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_receiptdate EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col13, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_returnflag EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col9, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_shipdate EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col11, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_shipinstruct EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col14, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_shipmode EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col15, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_suppkey EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: lineitem_test.l_tax EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col8, type:string, comment:), ]
_col0	_col1	_col2	_col3	_col4	_col5	_col6	_col7	_col8	_col9	_col10	_col11	_col12	_col13	_col14	_col15
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
PREHOOK: type: QUERY
PREHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lineitem_test
            Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: l_quantity (type: int), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE ('Huge number') END (type: string), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE (null) END (type: string), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN (null) ELSE (null) END (type: string), if((l_shipmode = 'SHIP      '), date_add(l_shipdate, 10), date_add(l_shipdate, 5)) (type: date), CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0) END (type: double), CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0.0) END (type: double), if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), null, l_tax) (type: decimal(10,2)), if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, null) (type: decimal(10,2)), if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), 0, l_tax) (type: decimal(12,2)), if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, 0) (type: decimal(12,2)), if((l_partkey > 30), CAST( l_receiptdate AS TIMESTAMP), CAST( l_commitdate AS TIMESTAMP)) (type: timestamp), if((l_suppkey > 10000), datediff(l_receiptdate, l_commitdate), null) (type: int), if((l_suppkey > 10000), null, datediff(l_receiptdate, l_commitdate)) (type: int), if(((l_suppkey % 500) > 100), 2009-01-01, 2009-12-31) (type: date)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col13, _col14, _col15, _col16
              Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: _col0 (type: int)
                sort order: +
                Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: date), _col5 (type: double), _col6 (type: double), _col7 (type: decimal(10,2)), _col8 (type: decimal(10,2)), _col9 (type: decimal(12,2)), _col10 (type: decimal(12,2)), _col13 (type: timestamp), _col14 (type: int), _col15 (type: int), _col16 (type: date)
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          notVectorizedReason: Select expression for SELECT operator: java.lang.RuntimeException: Unexpected primitive type category VOID
          vectorized: false
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: string), VALUE._col3 (type: date), VALUE._col4 (type: double), VALUE._col5 (type: double), VALUE._col6 (type: decimal(10,2)), VALUE._col7 (type: decimal(10,2)), VALUE._col8 (type: decimal(12,2)), VALUE._col9 (type: decimal(12,2)), VALUE._col8 (type: decimal(12,2)), VALUE._col9 (type: decimal(12,2)), VALUE._col10 (type: timestamp), VALUE._col11 (type: int), VALUE._col12 (type: int), VALUE._col13 (type: date)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
          Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
PREHOOK: type: QUERY
PREHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
POSTHOOK: query: SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
quantity	quantity_description	quantity_description_2	quantity_description_3	expected_date	field_1	field_2	field_3	field_4	field_5	field_6	field_7	field_8	field_9	field_10	field_11	field_12
NULL	Huge number	NULL	NULL	NULL	0.0	0.0	NULL	NULL	NULL	0.00	NULL	0.00	NULL	NULL	NULL	2009-12-31
1	Single	Single	Single	1994-12-06	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-12-15 00:00:00	NULL	3	2009-01-01
1	Single	Single	Single	1994-01-31	0.0	0.0	0.05	0.05	0.05	0.05	0.05	0.05	1994-01-28 00:00:00	NULL	-36	2009-01-01
2	Two	Two	Two	1995-08-12	2011.3912000000003	2011.3912000000003	NULL	NULL	0.00	0.00	0.00	0.00	1995-08-23 00:00:00	NULL	-45	2009-01-01
2	Two	Two	Two	1993-12-09	0.0	0.0	0.06	NULL	0.06	0.00	0.06	0.00	1994-01-01 00:00:00	NULL	-6	2009-01-01
3	Some	Some	Some	1994-06-11	0.0	0.0	0.04	NULL	0.04	0.00	0.04	0.00	1994-06-15 00:00:00	NULL	-42	2009-12-31
3	Some	Some	Some	1998-06-02	5137.6143	5137.6143	0.07	NULL	0.07	0.00	0.07	0.00	1998-06-02 00:00:00	NULL	60	2009-01-01
3	Some	Some	Some	1998-07-09	2778.921	2778.921	0.02	NULL	0.02	0.00	0.02	0.00	1998-07-21 00:00:00	NULL	46	2009-12-31
4	Some	Some	Some	1995-08-09	5990.4936	5990.4936	0.03	NULL	0.03	0.00	0.03	0.00	1995-09-03 00:00:00	NULL	-28	2009-01-01
4	Some	Some	Some	1997-04-27	5669.7732000000005	5669.7732000000005	0.04	NULL	0.04	0.00	0.04	0.00	1997-04-20 00:00:00	NULL	79	2009-01-01
5	Some	Some	Some	1997-02-25	8116.96	8116.96	NULL	NULL	0.00	0.00	0.00	0.00	1997-02-21 00:00:00	NULL	9	2009-01-01
5	Some	Some	Some	1996-02-15	6217.103999999999	6217.103999999999	0.02	NULL	0.02	0.00	0.02	0.00	1996-02-13 00:00:00	NULL	-42	2009-01-01
5	Some	Some	Some	1993-12-14	0.0	0.0	0.03	0.03	0.03	0.03	0.03	0.03	1993-12-23 00:00:00	NULL	-2	2009-01-01
6	Some	Some	Some	1998-11-04	9487.6152	9487.6152	0.06	NULL	0.06	0.00	0.06	0.00	1998-11-05 00:00:00	NULL	46	2009-12-31
6	Some	Some	Some	1995-07-26	8793.2736	8793.2736	0.03	NULL	0.03	0.00	0.03	0.00	1995-07-25 00:00:00	NULL	-60	2009-01-01
7	Some	Some	Some	1996-01-24	12613.136199999999	12613.136199999999	0.04	NULL	0.04	0.00	0.04	0.00	1996-01-29 00:00:00	NULL	38	2009-01-01
8	Some	Some	Some	1994-01-17	0.0	0.0	0.08	0.08	0.08	0.08	0.08	0.08	1994-01-14 00:00:00	NULL	-44	2009-01-01
8	Some	Some	Some	1996-02-03	11978.640000000001	11978.640000000001	0.02	0.02	0.02	0.02	0.02	0.02	1996-01-31 00:00:00	NULL	-34	2009-01-01
9	Some	Some	Some	1996-02-11	10666.6272	10666.6272	0.08	0.08	0.08	0.08	0.08	0.08	1996-02-19 00:00:00	NULL	-12	2009-01-01
11	Many	Many	NULL	1994-03-22	0.0	0.0	0.05	NULL	0.05	0.00	0.05	0.00	1994-03-27 00:00:00	NULL	10	2009-01-01
12	Many	Many	NULL	1996-05-12	12655.998	12655.998	0.03	0.03	0.03	0.03	0.03	0.03	1996-06-03 00:00:00	NULL	82	2009-01-01
12	Many	Many	NULL	1997-02-01	12156.034800000001	12156.034800000001	0.05	NULL	0.05	0.00	0.05	0.00	1997-02-22 00:00:00	NULL	1	2009-01-01
13	Many	Many	NULL	1994-03-08	0.0	0.0	0.06	NULL	0.06	0.00	0.06	0.00	1994-03-26 00:00:00	NULL	41	2009-01-01
13	Many	Many	NULL	1998-10-28	17554.68	17554.68	0.07	NULL	0.07	0.00	0.07	0.00	1998-11-06 00:00:00	NULL	53	2009-01-01
13	Many	Many	NULL	1993-04-06	0.0	0.0	0.02	NULL	0.02	0.00	0.02	0.00	1993-04-08 00:00:00	NULL	4	2009-01-01
14	Many	Many	NULL	1995-01-04	0.0	0.0	0.02	NULL	0.02	0.00	0.02	0.00	1995-01-27 00:00:00	NULL	66	2009-01-01
15	Many	Many	NULL	1994-11-05	0.0	0.0	0.04	NULL	0.04	0.00	0.04	0.00	1994-11-20 00:00:00	NULL	81	2009-12-31
17	Many	Many	NULL	1996-03-18	20321.500799999998	20321.500799999998	NULL	NULL	0.00	0.00	0.00	0.00	1996-03-22 00:00:00	NULL	39	2009-01-01
17	Many	Many	NULL	1994-07-07	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1994-07-03 00:00:00	NULL	-4	2009-01-01
19	Many	Many	NULL	1993-05-19	0.0	0.0	0.08	0.08	0.08	0.08	0.08	0.08	1993-05-25 00:00:00	NULL	81	2009-01-01
19	Many	Many	NULL	1994-02-05	0.0	0.0	0.03	0.03	0.03	0.03	0.03	0.03	1994-02-06 00:00:00	NULL	-11	2009-01-01
20	Many	Many	NULL	1998-07-02	32042.592	32042.592	0.01	NULL	0.01	0.00	0.01	0.00	1998-07-02 00:00:00	NULL	40	2009-01-01
21	Many	Many	NULL	1995-07-11	24640.0518	24640.0518	NULL	NULL	0.00	0.00	0.00	0.00	1995-07-31 00:00:00	NULL	78	2009-01-01
21	Many	Many	NULL	1994-10-05	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-10-26 00:00:00	NULL	38	2009-01-01
22	Many	Many	NULL	1998-10-14	28405.0184	28405.0184	0.06	NULL	0.06	0.00	0.06	0.00	1998-10-12 00:00:00	NULL	-4	2009-01-01
22	Many	Many	NULL	1995-07-22	39353.82	39353.82	0.05	NULL	0.05	0.00	0.05	0.00	1995-07-19 00:00:00	NULL	45	2009-01-01
23	Many	Many	NULL	1997-04-24	33946.3785	33946.3785	NULL	NULL	0.00	0.00	0.00	0.00	1997-05-06 00:00:00	NULL	81	2009-01-01
23	Many	Many	NULL	1994-10-13	0.0	0.0	0.00	NULL	0.00	0.00	0.00	0.00	1994-10-24 00:00:00	NULL	79	2009-12-31
23	Many	Many	NULL	1994-07-24	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-07-25 00:00:00	NULL	26	2009-01-01
24	Many	Many	NULL	1996-04-04	20542.032	20542.032	0.04	NULL	0.04	0.00	0.04	0.00	1996-04-01 00:00:00	NULL	18	2009-12-31
24	Many	Many	NULL	1996-02-26	31762.584	31762.584	0.00	0.00	0.00	0.00	0.00	0.00	1996-03-18 00:00:00	NULL	75	2009-01-01
25	Many	Many	NULL	1998-04-15	43064.1575	43064.1575	0.07	NULL	0.07	0.00	0.07	0.00	1998-04-11 00:00:00	NULL	-11	2009-01-01
25	Many	Many	NULL	1995-12-06	27263.995	27263.995	NULL	NULL	0.00	0.00	0.00	0.00	1995-12-21 00:00:00	NULL	-4	2009-01-01
26	Many	Many	NULL	1996-11-09	39912.433600000004	39912.433600000004	0.04	NULL	0.04	0.00	0.04	0.00	1996-11-20 00:00:00	NULL	31	2009-01-01
26	Many	Many	NULL	1995-04-25	0.0	0.0	0.03	NULL	0.03	0.00	0.03	0.00	1995-05-13 00:00:00	NULL	18	2009-01-01
26	Many	Many	NULL	1994-10-21	0.0	0.0	0.08	NULL	0.08	0.00	0.08	0.00	1994-10-19 00:00:00	NULL	24	2009-01-01
26	Many	Many	NULL	1993-11-03	0.0	0.0	0.02	0.02	0.02	0.02	0.02	0.02	1993-11-04 00:00:00	NULL	-44	2009-01-01
27	Many	Many	NULL	1994-01-26	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-01-23 00:00:00	NULL	62	2009-01-01
27	Many	Many	NULL	1998-06-29	45590.2425	45590.2425	NULL	NULL	0.00	0.00	0.00	0.00	1998-06-29 00:00:00	NULL	4	2009-01-01
28	Many	Many	NULL	1995-10-28	44866.219999999994	44866.219999999994	0.08	0.08	0.08	0.08	0.08	0.08	1995-10-26 00:00:00	NULL	60	2009-01-01
28	Many	Many	NULL	1994-12-29	0.0	0.0	0.07	NULL	0.07	0.00	0.07	0.00	1995-01-16 00:00:00	NULL	83	2009-01-01
28	Many	Many	NULL	1996-04-26	26349.6324	26349.6324	0.06	NULL	0.06	0.00	0.06	0.00	1996-05-16 00:00:00	NULL	47	2009-01-01
28	Many	Many	NULL	1996-03-26	30855.6612	30855.6612	0.04	NULL	0.04	0.00	0.04	0.00	1996-04-20 00:00:00	NULL	12	2009-12-31
28	Many	Many	NULL	1993-12-19	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1994-01-01 00:00:00	NULL	-9	2009-01-01
28	Many	Many	NULL	1996-02-06	45975.3616	45975.3616	0.02	NULL	0.02	0.00	0.02	0.00	1996-02-28 00:00:00	NULL	66	2009-01-01
29	Many	Many	NULL	1997-01-30	39341.806	39341.806	NULL	NULL	0.00	0.00	0.00	0.00	1997-01-27 00:00:00	NULL	0	2009-01-01
30	Many	Many	NULL	1994-06-08	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-06-22 00:00:00	NULL	24	2009-01-01
30	Many	Many	NULL	1996-01-15	29770.173	29770.173	NULL	NULL	0.00	0.00	0.00	0.00	1996-01-18 00:00:00	NULL	35	2009-12-31
30	Many	Many	NULL	1998-08-16	44561.46	44561.46	0.06	NULL	0.06	0.00	0.06	0.00	1998-08-14 00:00:00	NULL	34	2009-12-31
31	Many	Many	NULL	1994-02-24	0.0	0.0	0.08	0.08	0.08	0.08	0.08	0.08	1994-02-20 00:00:00	NULL	-19	2009-01-01
31	Many	Many	NULL	1993-11-03	0.0	0.0	0.04	NULL	0.04	0.00	0.04	0.00	1993-11-08 00:00:00	NULL	-41	2009-01-01
32	Many	Many	NULL	1995-08-19	63313.3312	63313.3312	0.00	NULL	0.00	0.00	0.00	0.00	1995-08-27 00:00:00	NULL	-41	2009-01-01
32	Many	Many	NULL	1993-12-14	0.0	0.0	0.05	NULL	0.05	0.00	0.05	0.00	1993-12-28 00:00:00	NULL	-7	2009-12-31
32	Many	Many	NULL	1994-08-29	0.0	0.0	0.06	NULL	0.06	0.00	0.06	0.00	1994-08-31 00:00:00	NULL	14	2009-01-01
32	Many	Many	NULL	1996-10-07	44955.15839999999	44955.15839999999	0.05	NULL	0.05	0.00	0.05	0.00	1996-10-14 00:00:00	NULL	-66	2009-12-31
32	Many	Many	NULL	1996-02-04	46146.7488	46146.7488	NULL	NULL	0.00	0.00	0.00	0.00	1996-02-03 00:00:00	NULL	-4	2009-01-01
33	Many	Many	NULL	1998-04-17	54174.12	54174.12	0.01	NULL	0.01	0.00	0.01	0.00	1998-04-15 00:00:00	NULL	26	2009-01-01
34	Many	Many	NULL	1998-03-10	56487.763199999994	56487.763199999994	NULL	NULL	0.00	0.00	0.00	0.00	1998-03-30 00:00:00	NULL	-23	2009-01-01
34	Many	Many	NULL	1996-01-27	63982.002400000005	63982.002400000005	NULL	NULL	0.00	0.00	0.00	0.00	1996-01-27 00:00:00	NULL	21	2009-01-01
34	Many	Many	NULL	1995-11-13	60586.5448	60586.5448	0.06	NULL	0.06	0.00	0.06	0.00	1995-11-26 00:00:00	NULL	-50	2009-01-01
35	Many	Many	NULL	1996-01-21	40475.225	40475.225	0.03	0.03	0.03	0.03	0.03	0.03	1996-01-22 00:00:00	NULL	-32	2009-01-01
36	Many	Many	NULL	1996-04-17	41844.6756	41844.6756	0.06	0.06	0.06	0.06	0.06	0.06	1996-04-20 00:00:00	NULL	52	2009-01-01
37	Many	Many	NULL	1994-02-18	0.0	0.0	0.04	NULL	0.04	0.00	0.04	0.00	1994-02-21 00:00:00	NULL	-23	2009-01-01
37	Many	Many	NULL	1993-04-23	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1993-04-14 00:00:00	NULL	15	2009-12-31
37	Many	Many	NULL	1992-05-02	0.0	0.0	0.03	0.03	0.03	0.03	0.03	0.03	1992-05-02 00:00:00	NULL	-13	2009-01-01
38	Many	Many	NULL	1997-02-02	44694.46	44694.46	0.05	0.05	0.05	0.05	0.05	0.05	1997-02-02 00:00:00	NULL	19	2009-01-01
38	Many	Many	NULL	1996-02-16	68028.3144	68028.3144	NULL	NULL	0.00	0.00	0.00	0.00	1996-02-18 00:00:00	NULL	-6	2009-01-01
39	Many	Many	NULL	1998-02-03	45146.01	45146.01	NULL	NULL	0.00	0.00	0.00	0.00	1998-02-18 00:00:00	NULL	-48	2009-01-01
39	Many	Many	NULL	1992-07-07	0.0	0.0	0.02	0.02	0.02	0.02	0.02	0.02	1992-07-28 00:00:00	NULL	-21	2009-01-01
40	Many	Many	NULL	1996-12-13	51224.736	51224.736	0.05	NULL	0.05	0.00	0.05	0.00	1997-01-01 00:00:00	NULL	71	2009-01-01
40	Many	Many	NULL	1992-07-26	0.0	0.0	0.03	NULL	0.03	0.00	0.03	0.00	1992-08-15 00:00:00	NULL	14	2009-01-01
41	Many	Many	NULL	1998-07-04	47989.6144	47989.6144	0.08	NULL	0.08	0.00	0.08	0.00	1998-07-06 00:00:00	NULL	9	2009-01-01
41	Many	Many	NULL	1994-02-26	0.0	0.0	0.07	NULL	0.07	0.00	0.07	0.00	1994-03-18 00:00:00	NULL	17	2009-01-01
41	Many	Many	NULL	1993-11-14	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1993-11-11 00:00:00	NULL	-74	2009-01-01
42	Many	Many	NULL	1994-08-05	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-08-28 00:00:00	NULL	33	2009-12-31
42	Many	Many	NULL	1996-02-13	68289.9672	68289.9672	0.00	NULL	0.00	0.00	0.00	0.00	1996-02-23 00:00:00	NULL	33	2009-01-01
43	Many	Many	NULL	1996-10-22	62727.3207	62727.3207	0.01	NULL	0.01	0.00	0.01	0.00	1996-10-26 00:00:00	NULL	-19	2009-12-31
43	Many	Many	NULL	1992-07-15	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1992-08-02 00:00:00	NULL	27	2009-01-01
44	Many	Many	NULL	1997-03-23	60781.124800000005	60781.124800000005	NULL	NULL	0.00	0.00	0.00	0.00	1997-04-13 00:00:00	NULL	74	2009-12-31
44	Many	Many	NULL	1996-10-04	80882.4192	80882.4192	0.02	NULL	0.02	0.00	0.02	0.00	1996-09-30 00:00:00	NULL	-48	2009-01-01
44	Many	Many	NULL	1995-09-02	75106.658	75106.658	NULL	NULL	0.00	0.00	0.00	0.00	1995-09-14 00:00:00	NULL	25	2009-01-01
44	Many	Many	NULL	1996-11-19	48941.692800000004	48941.692800000004	0.06	NULL	0.06	0.00	0.06	0.00	1996-12-12 00:00:00	NULL	-3	2009-01-01
45	Many	Many	NULL	1998-03-05	61489.35	61489.35	NULL	NULL	0.00	0.00	0.00	0.00	1998-03-24 00:00:00	NULL	4	2009-01-01
45	Many	Many	NULL	1994-02-07	0.0	0.0	0.00	NULL	0.00	0.00	0.00	0.00	1994-02-23 00:00:00	NULL	50	2009-01-01
46	Many	Many	NULL	1996-01-20	73475.892	73475.892	0.07	NULL	0.07	0.00	0.07	0.00	1996-02-03 00:00:00	NULL	-53	2009-01-01
46	Many	Many	NULL	1998-07-01	56583.5144	56583.5144	0.05	NULL	0.05	0.00	0.05	0.00	1998-07-05 00:00:00	NULL	28	2009-01-01
46	Many	Many	NULL	1998-08-18	84565.5168	84565.5168	0.05	NULL	0.05	0.00	0.05	0.00	1998-08-29 00:00:00	NULL	52	2009-01-01
46	Many	Many	NULL	1996-10-01	77781.4092	77781.4092	NULL	NULL	0.00	0.00	0.00	0.00	1996-10-26 00:00:00	NULL	-54	2009-01-01
48	Many	Many	NULL	1994-08-22	0.0	0.0	0.07	NULL	0.07	0.00	0.07	0.00	1994-09-08 00:00:00	NULL	28	2009-01-01
49	Many	Many	NULL	1993-11-14	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1993-11-24 00:00:00	NULL	-26	2009-12-31
50	Many	Many	NULL	1994-08-13	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-08-26 00:00:00	NULL	-48	2009-12-31
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
PREHOOK: type: QUERY
PREHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lineitem_test
            Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
            Select Operator
              expressions: l_quantity (type: int), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE ('Huge number') END (type: string), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE (null) END (type: string), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN (null) ELSE (null) END (type: string), if((l_shipmode = 'SHIP      '), date_add(l_shipdate, 10), date_add(l_shipdate, 5)) (type: date), CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0) END (type: double), CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0.0) END (type: double), if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), null, l_tax) (type: decimal(10,2)), if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, null) (type: decimal(10,2)), if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), 0, l_tax) (type: decimal(12,2)), if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, 0) (type: decimal(12,2)), if((l_partkey > 30), CAST( l_receiptdate AS TIMESTAMP), CAST( l_commitdate AS TIMESTAMP)) (type: timestamp), if((l_suppkey > 10000), datediff(l_receiptdate, l_commitdate), null) (type: int), if((l_suppkey > 10000), null, datediff(l_receiptdate, l_commitdate)) (type: int), if(((l_suppkey % 500) > 100), 2009-01-01, 2009-12-31) (type: date)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col13, _col14, _col15, _col16
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumns: [4, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 36, 37, 40, 23]
                  selectExpressions: VectorUDFAdaptor(CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE ('Huge number') END)(children: LongColEqualLongScalar(col 4, val 1) -> 16:boolean, LongColEqualLongScalar(col 4, val 2) -> 17:boolean, LongColLessLongScalar(col 4, val 10) -> 18:boolean, LongColLessLongScalar(col 4, val 100) -> 19:boolean) -> 20:string, VectorUDFAdaptor(CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE (null) END)(children: LongColEqualLongScalar(col 4, val 1) -> 16:boolean, LongColEqualLongScalar(col 4, val 2) -> 17:boolean, LongColLessLongScalar(col 4, val 10) -> 18:boolean, LongColLessLongScalar(col 4, val 100) -> 19:boolean) -> 21:string, VectorUDFAdaptor(CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN (null) ELSE (null) END)(children: LongColEqualLongScalar(col 4, val 1) -> 16:boolean, LongColEqualLongScalar(col 4, val 2) -> 17:boolean, LongColLessLongScalar(col 4, val 10) -> 18:boolean, LongColLessLongScalar(col 4, val 100) -> 19:boolean) -> 22:string, IfExprLongColumnLongColumn(col 16, col 23, col 24)(children: StringGroupColEqualCharScalar(col 14, val SHIP) -> 16:boolean, VectorUDFDateAddColScalar(col 10, val 10) -> 23:date, VectorUDFDateAddColScalar(col 10, val 5) -> 24:date) -> 25:date, VectorUDFAdaptor(CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0) END)(children: StringGroupColEqualCharScalar(col 8, val N) -> 16:boolean, DoubleColMultiplyDoubleColumn(col 5, col 26)(children: DoubleScalarSubtractDoubleColumn(val 1.0, col 6) -> 26:double) -> 27:double) -> 26:double, VectorUDFAdaptor(CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0.0) END)(children: StringGroupColEqualCharScalar(col 8, val N) -> 16:boolean, DoubleColMultiplyDoubleColumn(col 5, col 27)(children: DoubleScalarSubtractDoubleColumn(val 1.0, col 6) -> 27:double) -> 28:double) -> 27:double, IfExprNullColumn(col 16, null, col 7)(children: StringGroupColEqualStringScalar(col 29, val DELIVER IN PERSON)(children: CastStringGroupToString(col 13) -> 29:string) -> 16:boolean, col 7) -> 30:decimal(10,2), IfExprColumnNull(col 17, col 7, null)(children: StringGroupColEqualStringScalar(col 29, val TAKE BACK RETURN)(children: CastStringGroupToString(col 13) -> 29:string) -> 17:boolean, col 7) -> 31:decimal(10,2), VectorUDFAdaptor(if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), 0, l_tax))(children: StringGroupColEqualStringScalar(col 29, val DELIVER IN PERSON)(children: CastStringGroupToString(col 13) -> 29:string) -> 18:boolean) -> 32:decimal(12,2), VectorUDFAdaptor(if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, 0))(children: StringGroupColEqualStringScalar(col 29, val TAKE BACK RETURN)(children: CastStringGroupToString(col 13) -> 29:string) -> 18:boolean) -> 33:decimal(12,2), IfExprTimestampColumnColumn(col 18:LONG, col 34:TIMESTAMPcol 35:TIMESTAMP)(children: LongColGreaterLongScalar(col 1, val 30) -> 18:boolean, VectorUDFAdaptor(CAST( l_receiptdate AS TIMESTAMP)) -> 34:timestamp, VectorUDFAdaptor(CAST( l_commitdate AS TIMESTAMP)) -> 35:timestamp) -> 36:timestamp, IfExprColumnNull(col 18, col 19, null)(children: LongColGreaterLongScalar(col 2, val 10000) -> 18:boolean, VectorUDFDateDiffColCol(col 12, col 11) -> 19:int) -> 37:int, IfExprNullColumn(col 38, null, col 39)(children: LongColGreaterLongScalar(col 2, val 10000) -> 38:boolean, VectorUDFDateDiffColCol(col 12, col 11) -> 39:int) -> 40:int, IfExprLongScalarLongScalar(col 42, val 14245, val 14609)(children: LongColGreaterLongScalar(col 41, val 100)(children: LongColModuloLongScalar(col 2, val 500) -> 41:int) -> 42:boolean) -> 23:date
              Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: _col0 (type: int)
                sort order: +
                Reduce Sink Vectorization:
                    className: VectorReduceSinkOperator
                    native: false
                    nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, Not ACID UPDATE or DELETE IS true, No buckets IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false, Uniform Hash IS false
                Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: date), _col5 (type: double), _col6 (type: double), _col7 (type: decimal(10,2)), _col8 (type: decimal(10,2)), _col9 (type: decimal(12,2)), _col10 (type: decimal(12,2)), _col13 (type: timestamp), _col14 (type: int), _col15 (type: int), _col16 (type: date)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 16
              includeColumns: [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14]
              dataColumns: l_orderkey:int, l_partkey:int, l_suppkey:int, l_linenumber:int, l_quantity:int, l_extendedprice:double, l_discount:double, l_tax:decimal(10,2), l_returnflag:char(1), l_linestatus:char(1), l_shipdate:date, l_commitdate:date, l_receiptdate:date, l_shipinstruct:varchar(20), l_shipmode:char(10), l_comment:string
              partitionColumnCount: 0
              scratchColumnTypeNames: bigint, bigint, bigint, bigint, String, String, String, Date, Date, Date, Double, Double, Double, String, decimal(10,2), decimal(10,2), decimal(12,2), decimal(12,2), Timestamp, Timestamp, Timestamp, bigint, bigint, bigint, bigint, bigint, bigint
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: string), VALUE._col3 (type: date), VALUE._col4 (type: double), VALUE._col5 (type: double), VALUE._col6 (type: decimal(10,2)), VALUE._col7 (type: decimal(10,2)), VALUE._col8 (type: decimal(12,2)), VALUE._col9 (type: decimal(12,2)), VALUE._col8 (type: decimal(12,2)), VALUE._col9 (type: decimal(12,2)), VALUE._col10 (type: timestamp), VALUE._col11 (type: int), VALUE._col12 (type: int), VALUE._col13 (type: date)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
          Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
PREHOOK: type: QUERY
PREHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
POSTHOOK: query: SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
quantity	quantity_description	quantity_description_2	quantity_description_3	expected_date	field_1	field_2	field_3	field_4	field_5	field_6	field_7	field_8	field_9	field_10	field_11	field_12
NULL	Huge number	NULL	NULL	NULL	0.0	0.0	NULL	NULL	NULL	0.00	NULL	0.00	NULL	NULL	NULL	2009-12-31
1	Single	Single	Single	1994-12-06	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-12-15 00:00:00	NULL	3	2009-01-01
1	Single	Single	Single	1994-01-31	0.0	0.0	0.00	0.00	0.05	0.05	0.05	0.05	1994-01-28 00:00:00	NULL	-36	2009-01-01
2	Two	Two	Two	1995-08-12	2011.3912000000003	2011.3912000000003	NULL	NULL	0.00	0.00	0.00	0.00	1995-08-23 00:00:00	NULL	-45	2009-01-01
2	Two	Two	Two	1993-12-09	0.0	0.0	0.00	NULL	0.06	0.00	0.06	0.00	1994-01-01 00:00:00	NULL	-6	2009-01-01
3	Some	Some	Some	1994-06-11	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1994-06-15 00:00:00	NULL	-42	2009-12-31
3	Some	Some	Some	1998-06-02	5137.6143	5137.6143	0.00	NULL	0.07	0.00	0.07	0.00	1998-06-02 00:00:00	NULL	60	2009-01-01
3	Some	Some	Some	1998-07-09	2778.921	2778.921	0.00	NULL	0.02	0.00	0.02	0.00	1998-07-21 00:00:00	NULL	46	2009-12-31
4	Some	Some	Some	1995-08-09	5990.4936	5990.4936	0.00	NULL	0.03	0.00	0.03	0.00	1995-09-03 00:00:00	NULL	-28	2009-01-01
4	Some	Some	Some	1997-04-27	5669.7732000000005	5669.7732000000005	0.00	NULL	0.04	0.00	0.04	0.00	1997-04-20 00:00:00	NULL	79	2009-01-01
5	Some	Some	Some	1997-02-25	8116.96	8116.96	NULL	NULL	0.00	0.00	0.00	0.00	1997-02-21 00:00:00	NULL	9	2009-01-01
5	Some	Some	Some	1996-02-15	6217.103999999999	6217.103999999999	0.00	NULL	0.02	0.00	0.02	0.00	1996-02-13 00:00:00	NULL	-42	2009-01-01
5	Some	Some	Some	1993-12-14	0.0	0.0	0.00	0.00	0.03	0.03	0.03	0.03	1993-12-23 00:00:00	NULL	-2	2009-01-01
6	Some	Some	Some	1998-11-04	9487.6152	9487.6152	0.00	NULL	0.06	0.00	0.06	0.00	1998-11-05 00:00:00	NULL	46	2009-12-31
6	Some	Some	Some	1995-07-26	8793.2736	8793.2736	0.00	NULL	0.03	0.00	0.03	0.00	1995-07-25 00:00:00	NULL	-60	2009-01-01
7	Some	Some	Some	1996-01-24	12613.136199999999	12613.136199999999	0.00	NULL	0.04	0.00	0.04	0.00	1996-01-29 00:00:00	NULL	38	2009-01-01
8	Some	Some	Some	1994-01-17	0.0	0.0	0.00	0.00	0.08	0.08	0.08	0.08	1994-01-14 00:00:00	NULL	-44	2009-01-01
8	Some	Some	Some	1996-02-03	11978.640000000001	11978.640000000001	0.00	0.00	0.02	0.02	0.02	0.02	1996-01-31 00:00:00	NULL	-34	2009-01-01
9	Some	Some	Some	1996-02-11	10666.6272	10666.6272	0.00	0.00	0.08	0.08	0.08	0.08	1996-02-19 00:00:00	NULL	-12	2009-01-01
11	Many	Many	NULL	1994-03-22	0.0	0.0	0.00	NULL	0.05	0.00	0.05	0.00	1994-03-27 00:00:00	NULL	10	2009-01-01
12	Many	Many	NULL	1996-05-12	12655.998	12655.998	0.00	0.00	0.03	0.03	0.03	0.03	1996-06-03 00:00:00	NULL	82	2009-01-01
12	Many	Many	NULL	1997-02-01	12156.034800000001	12156.034800000001	0.00	NULL	0.05	0.00	0.05	0.00	1997-02-22 00:00:00	NULL	1	2009-01-01
13	Many	Many	NULL	1994-03-08	0.0	0.0	0.00	NULL	0.06	0.00	0.06	0.00	1994-03-26 00:00:00	NULL	41	2009-01-01
13	Many	Many	NULL	1998-10-28	17554.68	17554.68	0.00	NULL	0.07	0.00	0.07	0.00	1998-11-06 00:00:00	NULL	53	2009-01-01
13	Many	Many	NULL	1993-04-06	0.0	0.0	0.00	NULL	0.02	0.00	0.02	0.00	1993-04-08 00:00:00	NULL	4	2009-01-01
14	Many	Many	NULL	1995-01-04	0.0	0.0	0.00	NULL	0.02	0.00	0.02	0.00	1995-01-27 00:00:00	NULL	66	2009-01-01
15	Many	Many	NULL	1994-11-05	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1994-11-20 00:00:00	NULL	81	2009-12-31
17	Many	Many	NULL	1996-03-18	20321.500799999998	20321.500799999998	NULL	NULL	0.00	0.00	0.00	0.00	1996-03-22 00:00:00	NULL	39	2009-01-01
17	Many	Many	NULL	1994-07-07	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1994-07-03 00:00:00	NULL	-4	2009-01-01
19	Many	Many	NULL	1993-05-19	0.0	0.0	0.00	0.00	0.08	0.08	0.08	0.08	1993-05-25 00:00:00	NULL	81	2009-01-01
19	Many	Many	NULL	1994-02-05	0.0	0.0	0.00	0.00	0.03	0.03	0.03	0.03	1994-02-06 00:00:00	NULL	-11	2009-01-01
20	Many	Many	NULL	1998-07-02	32042.592	32042.592	0.00	NULL	0.01	0.00	0.01	0.00	1998-07-02 00:00:00	NULL	40	2009-01-01
21	Many	Many	NULL	1995-07-11	24640.0518	24640.0518	NULL	NULL	0.00	0.00	0.00	0.00	1995-07-31 00:00:00	NULL	78	2009-01-01
21	Many	Many	NULL	1994-10-05	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-10-26 00:00:00	NULL	38	2009-01-01
22	Many	Many	NULL	1998-10-14	28405.0184	28405.0184	0.00	NULL	0.06	0.00	0.06	0.00	1998-10-12 00:00:00	NULL	-4	2009-01-01
22	Many	Many	NULL	1995-07-22	39353.82	39353.82	0.00	NULL	0.05	0.00	0.05	0.00	1995-07-19 00:00:00	NULL	45	2009-01-01
23	Many	Many	NULL	1997-04-24	33946.3785	33946.3785	NULL	NULL	0.00	0.00	0.00	0.00	1997-05-06 00:00:00	NULL	81	2009-01-01
23	Many	Many	NULL	1994-10-13	0.0	0.0	0.00	NULL	0.00	0.00	0.00	0.00	1994-10-24 00:00:00	NULL	79	2009-12-31
23	Many	Many	NULL	1994-07-24	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-07-25 00:00:00	NULL	26	2009-01-01
24	Many	Many	NULL	1996-04-04	20542.032	20542.032	0.00	NULL	0.04	0.00	0.04	0.00	1996-04-01 00:00:00	NULL	18	2009-12-31
24	Many	Many	NULL	1996-02-26	31762.584	31762.584	0.00	0.00	0.00	0.00	0.00	0.00	1996-03-18 00:00:00	NULL	75	2009-01-01
25	Many	Many	NULL	1998-04-15	43064.1575	43064.1575	0.00	NULL	0.07	0.00	0.07	0.00	1998-04-11 00:00:00	NULL	-11	2009-01-01
25	Many	Many	NULL	1995-12-06	27263.995	27263.995	NULL	NULL	0.00	0.00	0.00	0.00	1995-12-21 00:00:00	NULL	-4	2009-01-01
26	Many	Many	NULL	1996-11-09	39912.433600000004	39912.433600000004	0.00	NULL	0.04	0.00	0.04	0.00	1996-11-20 00:00:00	NULL	31	2009-01-01
26	Many	Many	NULL	1995-04-25	0.0	0.0	0.00	NULL	0.03	0.00	0.03	0.00	1995-05-13 00:00:00	NULL	18	2009-01-01
26	Many	Many	NULL	1994-10-21	0.0	0.0	0.00	NULL	0.08	0.00	0.08	0.00	1994-10-19 00:00:00	NULL	24	2009-01-01
26	Many	Many	NULL	1993-11-03	0.0	0.0	0.00	0.00	0.02	0.02	0.02	0.02	1993-11-04 00:00:00	NULL	-44	2009-01-01
27	Many	Many	NULL	1994-01-26	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-01-23 00:00:00	NULL	62	2009-01-01
27	Many	Many	NULL	1998-06-29	45590.2425	45590.2425	NULL	NULL	0.00	0.00	0.00	0.00	1998-06-29 00:00:00	NULL	4	2009-01-01
28	Many	Many	NULL	1995-10-28	44866.219999999994	44866.219999999994	0.00	0.00	0.08	0.08	0.08	0.08	1995-10-26 00:00:00	NULL	60	2009-01-01
28	Many	Many	NULL	1994-12-29	0.0	0.0	0.00	NULL	0.07	0.00	0.07	0.00	1995-01-16 00:00:00	NULL	83	2009-01-01
28	Many	Many	NULL	1996-04-26	26349.6324	26349.6324	0.00	NULL	0.06	0.00	0.06	0.00	1996-05-16 00:00:00	NULL	47	2009-01-01
28	Many	Many	NULL	1996-03-26	30855.6612	30855.6612	0.00	NULL	0.04	0.00	0.04	0.00	1996-04-20 00:00:00	NULL	12	2009-12-31
28	Many	Many	NULL	1993-12-19	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1994-01-01 00:00:00	NULL	-9	2009-01-01
28	Many	Many	NULL	1996-02-06	45975.3616	45975.3616	0.00	NULL	0.02	0.00	0.02	0.00	1996-02-28 00:00:00	NULL	66	2009-01-01
29	Many	Many	NULL	1997-01-30	39341.806	39341.806	NULL	NULL	0.00	0.00	0.00	0.00	1997-01-27 00:00:00	NULL	0	2009-01-01
30	Many	Many	NULL	1994-06-08	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-06-22 00:00:00	NULL	24	2009-01-01
30	Many	Many	NULL	1996-01-15	29770.173	29770.173	NULL	NULL	0.00	0.00	0.00	0.00	1996-01-18 00:00:00	NULL	35	2009-12-31
30	Many	Many	NULL	1998-08-16	44561.46	44561.46	0.00	NULL	0.06	0.00	0.06	0.00	1998-08-14 00:00:00	NULL	34	2009-12-31
31	Many	Many	NULL	1994-02-24	0.0	0.0	0.00	0.00	0.08	0.08	0.08	0.08	1994-02-20 00:00:00	NULL	-19	2009-01-01
31	Many	Many	NULL	1993-11-03	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1993-11-08 00:00:00	NULL	-41	2009-01-01
32	Many	Many	NULL	1995-08-19	63313.3312	63313.3312	0.00	NULL	0.00	0.00	0.00	0.00	1995-08-27 00:00:00	NULL	-41	2009-01-01
32	Many	Many	NULL	1993-12-14	0.0	0.0	0.00	NULL	0.05	0.00	0.05	0.00	1993-12-28 00:00:00	NULL	-7	2009-12-31
32	Many	Many	NULL	1994-08-29	0.0	0.0	0.00	NULL	0.06	0.00	0.06	0.00	1994-08-31 00:00:00	NULL	14	2009-01-01
32	Many	Many	NULL	1996-10-07	44955.15839999999	44955.15839999999	0.00	NULL	0.05	0.00	0.05	0.00	1996-10-14 00:00:00	NULL	-66	2009-12-31
32	Many	Many	NULL	1996-02-04	46146.7488	46146.7488	NULL	NULL	0.00	0.00	0.00	0.00	1996-02-03 00:00:00	NULL	-4	2009-01-01
33	Many	Many	NULL	1998-04-17	54174.12	54174.12	0.00	NULL	0.01	0.00	0.01	0.00	1998-04-15 00:00:00	NULL	26	2009-01-01
34	Many	Many	NULL	1998-03-10	56487.763199999994	56487.763199999994	NULL	NULL	0.00	0.00	0.00	0.00	1998-03-30 00:00:00	NULL	-23	2009-01-01
34	Many	Many	NULL	1996-01-27	63982.002400000005	63982.002400000005	NULL	NULL	0.00	0.00	0.00	0.00	1996-01-27 00:00:00	NULL	21	2009-01-01
34	Many	Many	NULL	1995-11-13	60586.5448	60586.5448	0.00	NULL	0.06	0.00	0.06	0.00	1995-11-26 00:00:00	NULL	-50	2009-01-01
35	Many	Many	NULL	1996-01-21	40475.225	40475.225	0.00	0.00	0.03	0.03	0.03	0.03	1996-01-22 00:00:00	NULL	-32	2009-01-01
36	Many	Many	NULL	1996-04-17	41844.6756	41844.6756	0.00	0.00	0.06	0.06	0.06	0.06	1996-04-20 00:00:00	NULL	52	2009-01-01
37	Many	Many	NULL	1994-02-18	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1994-02-21 00:00:00	NULL	-23	2009-01-01
37	Many	Many	NULL	1993-04-23	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1993-04-14 00:00:00	NULL	15	2009-12-31
37	Many	Many	NULL	1992-05-02	0.0	0.0	0.00	0.00	0.03	0.03	0.03	0.03	1992-05-02 00:00:00	NULL	-13	2009-01-01
38	Many	Many	NULL	1997-02-02	44694.46	44694.46	0.00	0.00	0.05	0.05	0.05	0.05	1997-02-02 00:00:00	NULL	19	2009-01-01
38	Many	Many	NULL	1996-02-16	68028.3144	68028.3144	NULL	NULL	0.00	0.00	0.00	0.00	1996-02-18 00:00:00	NULL	-6	2009-01-01
39	Many	Many	NULL	1998-02-03	45146.01	45146.01	NULL	NULL	0.00	0.00	0.00	0.00	1998-02-18 00:00:00	NULL	-48	2009-01-01
39	Many	Many	NULL	1992-07-07	0.0	0.0	0.00	0.00	0.02	0.02	0.02	0.02	1992-07-28 00:00:00	NULL	-21	2009-01-01
40	Many	Many	NULL	1996-12-13	51224.736	51224.736	0.00	NULL	0.05	0.00	0.05	0.00	1997-01-01 00:00:00	NULL	71	2009-01-01
40	Many	Many	NULL	1992-07-26	0.0	0.0	0.00	NULL	0.03	0.00	0.03	0.00	1992-08-15 00:00:00	NULL	14	2009-01-01
41	Many	Many	NULL	1998-07-04	47989.6144	47989.6144	0.00	NULL	0.08	0.00	0.08	0.00	1998-07-06 00:00:00	NULL	9	2009-01-01
41	Many	Many	NULL	1994-02-26	0.0	0.0	0.00	NULL	0.07	0.00	0.07	0.00	1994-03-18 00:00:00	NULL	17	2009-01-01
41	Many	Many	NULL	1993-11-14	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1993-11-11 00:00:00	NULL	-74	2009-01-01
42	Many	Many	NULL	1994-08-05	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-08-28 00:00:00	NULL	33	2009-12-31
42	Many	Many	NULL	1996-02-13	68289.9672	68289.9672	0.00	NULL	0.00	0.00	0.00	0.00	1996-02-23 00:00:00	NULL	33	2009-01-01
43	Many	Many	NULL	1996-10-22	62727.3207	62727.3207	0.00	NULL	0.01	0.00	0.01	0.00	1996-10-26 00:00:00	NULL	-19	2009-12-31
43	Many	Many	NULL	1992-07-15	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1992-08-02 00:00:00	NULL	27	2009-01-01
44	Many	Many	NULL	1997-03-23	60781.124800000005	60781.124800000005	NULL	NULL	0.00	0.00	0.00	0.00	1997-04-13 00:00:00	NULL	74	2009-12-31
44	Many	Many	NULL	1996-10-04	80882.4192	80882.4192	0.00	NULL	0.02	0.00	0.02	0.00	1996-09-30 00:00:00	NULL	-48	2009-01-01
44	Many	Many	NULL	1995-09-02	75106.658	75106.658	NULL	NULL	0.00	0.00	0.00	0.00	1995-09-14 00:00:00	NULL	25	2009-01-01
44	Many	Many	NULL	1996-11-19	48941.692800000004	48941.692800000004	0.00	NULL	0.06	0.00	0.06	0.00	1996-12-12 00:00:00	NULL	-3	2009-01-01
45	Many	Many	NULL	1998-03-05	61489.35	61489.35	NULL	NULL	0.00	0.00	0.00	0.00	1998-03-24 00:00:00	NULL	4	2009-01-01
45	Many	Many	NULL	1994-02-07	0.0	0.0	0.00	NULL	0.00	0.00	0.00	0.00	1994-02-23 00:00:00	NULL	50	2009-01-01
46	Many	Many	NULL	1996-01-20	73475.892	73475.892	0.00	NULL	0.07	0.00	0.07	0.00	1996-02-03 00:00:00	NULL	-53	2009-01-01
46	Many	Many	NULL	1998-07-01	56583.5144	56583.5144	0.00	NULL	0.05	0.00	0.05	0.00	1998-07-05 00:00:00	NULL	28	2009-01-01
46	Many	Many	NULL	1998-08-18	84565.5168	84565.5168	0.00	NULL	0.05	0.00	0.05	0.00	1998-08-29 00:00:00	NULL	52	2009-01-01
46	Many	Many	NULL	1996-10-01	77781.4092	77781.4092	NULL	NULL	0.00	0.00	0.00	0.00	1996-10-26 00:00:00	NULL	-54	2009-01-01
48	Many	Many	NULL	1994-08-22	0.0	0.0	0.00	NULL	0.07	0.00	0.07	0.00	1994-09-08 00:00:00	NULL	28	2009-01-01
49	Many	Many	NULL	1993-11-14	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1993-11-24 00:00:00	NULL	-26	2009-12-31
50	Many	Many	NULL	1994-08-13	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-08-26 00:00:00	NULL	-48	2009-12-31
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
PREHOOK: type: QUERY
PREHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
Explain
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: lineitem_test
            Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
            TableScan Vectorization:
                native: true
                projectedOutputColumns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
            Select Operator
              expressions: l_quantity (type: int), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE ('Huge number') END (type: string), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE (null) END (type: string), CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN (null) ELSE (null) END (type: string), if((l_shipmode = 'SHIP      '), date_add(l_shipdate, 10), date_add(l_shipdate, 5)) (type: date), CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0) END (type: double), CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0.0) END (type: double), if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), null, l_tax) (type: decimal(10,2)), if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, null) (type: decimal(10,2)), if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), 0, l_tax) (type: decimal(12,2)), if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, 0) (type: decimal(12,2)), if((l_partkey > 30), CAST( l_receiptdate AS TIMESTAMP), CAST( l_commitdate AS TIMESTAMP)) (type: timestamp), if((l_suppkey > 10000), datediff(l_receiptdate, l_commitdate), null) (type: int), if((l_suppkey > 10000), null, datediff(l_receiptdate, l_commitdate)) (type: int), if(((l_suppkey % 500) > 100), 2009-01-01, 2009-12-31) (type: date)
              outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col13, _col14, _col15, _col16
              Select Vectorization:
                  className: VectorSelectOperator
                  native: true
                  projectedOutputColumns: [4, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 36, 39, 42, 45]
                  selectExpressions: VectorUDFAdaptor(CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE ('Huge number') END)(children: LongColEqualLongScalar(col 4, val 1) -> 16:boolean, LongColEqualLongScalar(col 4, val 2) -> 17:boolean, LongColLessLongScalar(col 4, val 10) -> 18:boolean, LongColLessLongScalar(col 4, val 100) -> 19:boolean) -> 20:string, VectorUDFAdaptor(CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN ('Many') ELSE (null) END)(children: LongColEqualLongScalar(col 4, val 1) -> 16:boolean, LongColEqualLongScalar(col 4, val 2) -> 17:boolean, LongColLessLongScalar(col 4, val 10) -> 18:boolean, LongColLessLongScalar(col 4, val 100) -> 19:boolean) -> 21:string, VectorUDFAdaptor(CASE WHEN ((l_quantity = 1)) THEN ('Single') WHEN ((l_quantity = 2)) THEN ('Two') WHEN ((l_quantity < 10)) THEN ('Some') WHEN ((l_quantity < 100)) THEN (null) ELSE (null) END)(children: LongColEqualLongScalar(col 4, val 1) -> 16:boolean, LongColEqualLongScalar(col 4, val 2) -> 17:boolean, LongColLessLongScalar(col 4, val 10) -> 18:boolean, LongColLessLongScalar(col 4, val 100) -> 19:boolean) -> 22:string, IfExprCondExprCondExpr(col 16:LONG, col 23:DATEcol 24:DATE)(children: StringGroupColEqualCharScalar(col 14, val SHIP) -> 16:boolean, VectorUDFDateAddColScalar(col 10, val 10) -> 23:date, VectorUDFDateAddColScalar(col 10, val 5) -> 24:date) -> 25:date, VectorUDFAdaptor(CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0) END)(children: StringGroupColEqualCharScalar(col 8, val N) -> 17:boolean, DoubleColMultiplyDoubleColumn(col 5, col 26)(children: DoubleScalarSubtractDoubleColumn(val 1.0, col 6) -> 26:double) -> 27:double) -> 26:double, VectorUDFAdaptor(CASE WHEN ((l_returnflag = 'N')) THEN ((l_extendedprice * (1.0 - l_discount))) ELSE (0.0) END)(children: StringGroupColEqualCharScalar(col 8, val N) -> 17:boolean, DoubleColMultiplyDoubleColumn(col 5, col 27)(children: DoubleScalarSubtractDoubleColumn(val 1.0, col 6) -> 27:double) -> 28:double) -> 27:double, IfExprNullColumn(col 17, null, col 7)(children: StringGroupColEqualStringScalar(col 29, val DELIVER IN PERSON)(children: CastStringGroupToString(col 13) -> 29:string) -> 17:boolean, col 7) -> 30:decimal(10,2), IfExprColumnNull(col 18, col 7, null)(children: StringGroupColEqualStringScalar(col 29, val TAKE BACK RETURN)(children: CastStringGroupToString(col 13) -> 29:string) -> 18:boolean, col 7) -> 31:decimal(10,2), VectorUDFAdaptor(if((UDFToString(l_shipinstruct) = 'DELIVER IN PERSON'), 0, l_tax))(children: StringGroupColEqualStringScalar(col 29, val DELIVER IN PERSON)(children: CastStringGroupToString(col 13) -> 29:string) -> 19:boolean) -> 32:decimal(12,2), VectorUDFAdaptor(if((UDFToString(l_shipinstruct) = 'TAKE BACK RETURN'), l_tax, 0))(children: StringGroupColEqualStringScalar(col 29, val TAKE BACK RETURN)(children: CastStringGroupToString(col 13) -> 29:string) -> 19:boolean) -> 33:decimal(12,2), IfExprCondExprCondExpr(col 19:LONG, col 34:TIMESTAMPcol 35:TIMESTAMP)(children: LongColGreaterLongScalar(col 1, val 30) -> 19:boolean, VectorUDFAdaptor(CAST( l_receiptdate AS TIMESTAMP)) -> 34:timestamp, VectorUDFAdaptor(CAST( l_commitdate AS TIMESTAMP)) -> 35:timestamp) -> 36:timestamp, IfExprCondExprNull(col 37:<input types is null>, col 38:<input types is null>, null)(children: LongColGreaterLongScalar(col 2, val 10000) -> 37:boolean, VectorUDFDateDiffColCol(col 12, col 11) -> 38:int) -> 39:int, IfExprNullCondExpr(col 40:<input types is null>, null, col 41:<input types is null>)(children: LongColGreaterLongScalar(col 2, val 10000) -> 40:boolean, VectorUDFDateDiffColCol(col 12, col 11) -> 41:int) -> 42:int, IfExprLongScalarLongScalar(col 44, val 14245, val 14609)(children: LongColGreaterLongScalar(col 43, val 100)(children: LongColModuloLongScalar(col 2, val 500) -> 43:int) -> 44:boolean) -> 45:date
              Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
              Reduce Output Operator
                key expressions: _col0 (type: int)
                sort order: +
                Reduce Sink Vectorization:
                    className: VectorReduceSinkOperator
                    native: false
                    nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, Not ACID UPDATE or DELETE IS true, No buckets IS true, No TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                    nativeConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false, Uniform Hash IS false
                Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
                value expressions: _col1 (type: string), _col2 (type: string), _col3 (type: string), _col4 (type: date), _col5 (type: double), _col6 (type: double), _col7 (type: decimal(10,2)), _col8 (type: decimal(10,2)), _col9 (type: decimal(12,2)), _col10 (type: decimal(12,2)), _col13 (type: timestamp), _col14 (type: int), _col15 (type: int), _col16 (type: date)
      Execution mode: vectorized
      Map Vectorization:
          enabled: true
          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
          groupByVectorOutput: true
          inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
          allNative: false
          usesVectorUDFAdaptor: true
          vectorized: true
          rowBatchContext:
              dataColumnCount: 16
              includeColumns: [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14]
              dataColumns: l_orderkey:int, l_partkey:int, l_suppkey:int, l_linenumber:int, l_quantity:int, l_extendedprice:double, l_discount:double, l_tax:decimal(10,2), l_returnflag:char(1), l_linestatus:char(1), l_shipdate:date, l_commitdate:date, l_receiptdate:date, l_shipinstruct:varchar(20), l_shipmode:char(10), l_comment:string
              partitionColumnCount: 0
              scratchColumnTypeNames: bigint, bigint, bigint, bigint, String, String, String, Date, Date, Date, Double, Double, Double, String, decimal(10,2), decimal(10,2), decimal(12,2), decimal(12,2), Timestamp, Timestamp, Timestamp, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, Date
      Reduce Vectorization:
          enabled: false
          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true
          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false
      Reduce Operator Tree:
        Select Operator
          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: string), VALUE._col3 (type: date), VALUE._col4 (type: double), VALUE._col5 (type: double), VALUE._col6 (type: decimal(10,2)), VALUE._col7 (type: decimal(10,2)), VALUE._col8 (type: decimal(12,2)), VALUE._col9 (type: decimal(12,2)), VALUE._col8 (type: decimal(12,2)), VALUE._col9 (type: decimal(12,2)), VALUE._col10 (type: timestamp), VALUE._col11 (type: int), VALUE._col12 (type: int), VALUE._col13 (type: date)
          outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13, _col14, _col15, _col16
          Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
          File Output Operator
            compressed: false
            Statistics: Num rows: 101 Data size: 78920 Basic stats: COMPLETE Column stats: NONE
            table:
                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
PREHOOK: type: QUERY
PREHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
POSTHOOK: query: SELECT
   L_QUANTITY as Quantity,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE "Huge number" END AS Quantity_Description,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN "Many"
     ELSE NULL END AS Quantity_Description_2,
   CASE
     WHEN L_QUANTITY = 1 THEN "Single"
     WHEN L_QUANTITY = 2 THEN "Two"
     WHEN L_QUANTITY < 10 THEN "Some"
     WHEN L_QUANTITY < 100 THEN NULL
     ELSE NULL END AS Quantity_Description_3,
   IF(L_SHIPMODE = "SHIP", DATE_ADD(l_shipdate, 10), DATE_ADD(l_shipdate, 5)) AS Expected_Date,
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE 0 END AS Field_1,  -- The 0 will be an integer and requires implicit casting.
   CASE WHEN L_RETURNFLAG = "N"
            THEN l_extendedprice * (1 - l_discount)
        ELSE CAST(0 AS DOUBLE) END AS Field_2,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", NULL, L_TAX) AS Field_3,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, NULL) AS Field_4,
   -- For the next 2 IF stmts, the 0s are integer and require implicit casting to decimal.
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0, L_TAX) AS Field_5,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0) AS Field_6,
   IF(L_SHIPINSTRUCT = "DELIVER IN PERSON", 0BD, L_TAX) AS Field_7,
   IF(L_SHIPINSTRUCT = "TAKE BACK RETURN", L_TAX, 0BD) AS Field_8,
   IF(L_PARTKEY > 30, CAST(L_RECEIPTDATE AS TIMESTAMP), CAST(L_COMMITDATE AS TIMESTAMP)) AS Field_9,
   IF(L_SUPPKEY > 10000, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE), NULL) AS Field_10,
   IF(L_SUPPKEY > 10000, NULL, DATEDIFF(L_RECEIPTDATE, L_COMMITDATE)) AS Field_11,
   IF(L_SUPPKEY % 500 > 100, DATE_ADD('2008-12-31', 1), DATE_ADD('2008-12-31', 365)) AS Field_12
FROM lineitem_test
ORDER BY Quantity
POSTHOOK: type: QUERY
POSTHOOK: Input: default@lineitem_test
#### A masked pattern was here ####
quantity	quantity_description	quantity_description_2	quantity_description_3	expected_date	field_1	field_2	field_3	field_4	field_5	field_6	field_7	field_8	field_9	field_10	field_11	field_12
NULL	Huge number	NULL	NULL	NULL	0.0	0.0	NULL	NULL	NULL	0.00	NULL	0.00	NULL	NULL	NULL	2009-12-31
1	Single	Single	Single	1994-12-06	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-12-15 00:00:00	NULL	3	2009-01-01
1	Single	Single	Single	1994-01-31	0.0	0.0	0.00	0.00	0.05	0.05	0.05	0.05	1994-01-28 00:00:00	NULL	-36	2009-01-01
2	Two	Two	Two	1995-08-12	2011.3912000000003	2011.3912000000003	NULL	NULL	0.00	0.00	0.00	0.00	1995-08-23 00:00:00	NULL	-45	2009-01-01
2	Two	Two	Two	1993-12-09	0.0	0.0	0.00	NULL	0.06	0.00	0.06	0.00	1994-01-01 00:00:00	NULL	-6	2009-01-01
3	Some	Some	Some	1994-06-11	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1994-06-15 00:00:00	NULL	-42	2009-12-31
3	Some	Some	Some	1998-06-02	5137.6143	5137.6143	0.00	NULL	0.07	0.00	0.07	0.00	1998-06-02 00:00:00	NULL	60	2009-01-01
3	Some	Some	Some	1998-07-09	2778.921	2778.921	0.00	NULL	0.02	0.00	0.02	0.00	1998-07-21 00:00:00	NULL	46	2009-12-31
4	Some	Some	Some	1995-08-09	5990.4936	5990.4936	0.00	NULL	0.03	0.00	0.03	0.00	1995-09-03 00:00:00	NULL	-28	2009-01-01
4	Some	Some	Some	1997-04-27	5669.7732000000005	5669.7732000000005	0.00	NULL	0.04	0.00	0.04	0.00	1997-04-20 00:00:00	NULL	79	2009-01-01
5	Some	Some	Some	1997-02-25	8116.96	8116.96	NULL	NULL	0.00	0.00	0.00	0.00	1997-02-21 00:00:00	NULL	9	2009-01-01
5	Some	Some	Some	1996-02-15	6217.103999999999	6217.103999999999	0.00	NULL	0.02	0.00	0.02	0.00	1996-02-13 00:00:00	NULL	-42	2009-01-01
5	Some	Some	Some	1993-12-14	0.0	0.0	0.00	0.00	0.03	0.03	0.03	0.03	1993-12-23 00:00:00	NULL	-2	2009-01-01
6	Some	Some	Some	1998-11-04	9487.6152	9487.6152	0.00	NULL	0.06	0.00	0.06	0.00	1998-11-05 00:00:00	NULL	46	2009-12-31
6	Some	Some	Some	1995-07-26	8793.2736	8793.2736	0.00	NULL	0.03	0.00	0.03	0.00	1995-07-25 00:00:00	NULL	-60	2009-01-01
7	Some	Some	Some	1996-01-24	12613.136199999999	12613.136199999999	0.00	NULL	0.04	0.00	0.04	0.00	1996-01-29 00:00:00	NULL	38	2009-01-01
8	Some	Some	Some	1994-01-17	0.0	0.0	0.00	0.00	0.08	0.08	0.08	0.08	1994-01-14 00:00:00	NULL	-44	2009-01-01
8	Some	Some	Some	1996-02-03	11978.640000000001	11978.640000000001	0.00	0.00	0.02	0.02	0.02	0.02	1996-01-31 00:00:00	NULL	-34	2009-01-01
9	Some	Some	Some	1996-02-11	10666.6272	10666.6272	0.00	0.00	0.08	0.08	0.08	0.08	1996-02-19 00:00:00	NULL	-12	2009-01-01
11	Many	Many	NULL	1994-03-22	0.0	0.0	0.00	NULL	0.05	0.00	0.05	0.00	1994-03-27 00:00:00	NULL	10	2009-01-01
12	Many	Many	NULL	1996-05-12	12655.998	12655.998	0.00	0.00	0.03	0.03	0.03	0.03	1996-06-03 00:00:00	NULL	82	2009-01-01
12	Many	Many	NULL	1997-02-01	12156.034800000001	12156.034800000001	0.00	NULL	0.05	0.00	0.05	0.00	1997-02-22 00:00:00	NULL	1	2009-01-01
13	Many	Many	NULL	1994-03-08	0.0	0.0	0.00	NULL	0.06	0.00	0.06	0.00	1994-03-26 00:00:00	NULL	41	2009-01-01
13	Many	Many	NULL	1998-10-28	17554.68	17554.68	0.00	NULL	0.07	0.00	0.07	0.00	1998-11-06 00:00:00	NULL	53	2009-01-01
13	Many	Many	NULL	1993-04-06	0.0	0.0	0.00	NULL	0.02	0.00	0.02	0.00	1993-04-08 00:00:00	NULL	4	2009-01-01
14	Many	Many	NULL	1995-01-04	0.0	0.0	0.00	NULL	0.02	0.00	0.02	0.00	1995-01-27 00:00:00	NULL	66	2009-01-01
15	Many	Many	NULL	1994-11-05	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1994-11-20 00:00:00	NULL	81	2009-12-31
17	Many	Many	NULL	1996-03-18	20321.500799999998	20321.500799999998	NULL	NULL	0.00	0.00	0.00	0.00	1996-03-22 00:00:00	NULL	39	2009-01-01
17	Many	Many	NULL	1994-07-07	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1994-07-03 00:00:00	NULL	-4	2009-01-01
19	Many	Many	NULL	1993-05-19	0.0	0.0	0.00	0.00	0.08	0.08	0.08	0.08	1993-05-25 00:00:00	NULL	81	2009-01-01
19	Many	Many	NULL	1994-02-05	0.0	0.0	0.00	0.00	0.03	0.03	0.03	0.03	1994-02-06 00:00:00	NULL	-11	2009-01-01
20	Many	Many	NULL	1998-07-02	32042.592	32042.592	0.00	NULL	0.01	0.00	0.01	0.00	1998-07-02 00:00:00	NULL	40	2009-01-01
21	Many	Many	NULL	1995-07-11	24640.0518	24640.0518	NULL	NULL	0.00	0.00	0.00	0.00	1995-07-31 00:00:00	NULL	78	2009-01-01
21	Many	Many	NULL	1994-10-05	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-10-26 00:00:00	NULL	38	2009-01-01
22	Many	Many	NULL	1998-10-14	28405.0184	28405.0184	0.00	NULL	0.06	0.00	0.06	0.00	1998-10-12 00:00:00	NULL	-4	2009-01-01
22	Many	Many	NULL	1995-07-22	39353.82	39353.82	0.00	NULL	0.05	0.00	0.05	0.00	1995-07-19 00:00:00	NULL	45	2009-01-01
23	Many	Many	NULL	1997-04-24	33946.3785	33946.3785	NULL	NULL	0.00	0.00	0.00	0.00	1997-05-06 00:00:00	NULL	81	2009-01-01
23	Many	Many	NULL	1994-10-13	0.0	0.0	0.00	NULL	0.00	0.00	0.00	0.00	1994-10-24 00:00:00	NULL	79	2009-12-31
23	Many	Many	NULL	1994-07-24	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-07-25 00:00:00	NULL	26	2009-01-01
24	Many	Many	NULL	1996-04-04	20542.032	20542.032	0.00	NULL	0.04	0.00	0.04	0.00	1996-04-01 00:00:00	NULL	18	2009-12-31
24	Many	Many	NULL	1996-02-26	31762.584	31762.584	0.00	0.00	0.00	0.00	0.00	0.00	1996-03-18 00:00:00	NULL	75	2009-01-01
25	Many	Many	NULL	1998-04-15	43064.1575	43064.1575	0.00	NULL	0.07	0.00	0.07	0.00	1998-04-11 00:00:00	NULL	-11	2009-01-01
25	Many	Many	NULL	1995-12-06	27263.995	27263.995	NULL	NULL	0.00	0.00	0.00	0.00	1995-12-21 00:00:00	NULL	-4	2009-01-01
26	Many	Many	NULL	1996-11-09	39912.433600000004	39912.433600000004	0.00	NULL	0.04	0.00	0.04	0.00	1996-11-20 00:00:00	NULL	31	2009-01-01
26	Many	Many	NULL	1995-04-25	0.0	0.0	0.00	NULL	0.03	0.00	0.03	0.00	1995-05-13 00:00:00	NULL	18	2009-01-01
26	Many	Many	NULL	1994-10-21	0.0	0.0	0.00	NULL	0.08	0.00	0.08	0.00	1994-10-19 00:00:00	NULL	24	2009-01-01
26	Many	Many	NULL	1993-11-03	0.0	0.0	0.00	0.00	0.02	0.02	0.02	0.02	1993-11-04 00:00:00	NULL	-44	2009-01-01
27	Many	Many	NULL	1994-01-26	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-01-23 00:00:00	NULL	62	2009-01-01
27	Many	Many	NULL	1998-06-29	45590.2425	45590.2425	NULL	NULL	0.00	0.00	0.00	0.00	1998-06-29 00:00:00	NULL	4	2009-01-01
28	Many	Many	NULL	1995-10-28	44866.219999999994	44866.219999999994	0.00	0.00	0.08	0.08	0.08	0.08	1995-10-26 00:00:00	NULL	60	2009-01-01
28	Many	Many	NULL	1994-12-29	0.0	0.0	0.00	NULL	0.07	0.00	0.07	0.00	1995-01-16 00:00:00	NULL	83	2009-01-01
28	Many	Many	NULL	1996-04-26	26349.6324	26349.6324	0.00	NULL	0.06	0.00	0.06	0.00	1996-05-16 00:00:00	NULL	47	2009-01-01
28	Many	Many	NULL	1996-03-26	30855.6612	30855.6612	0.00	NULL	0.04	0.00	0.04	0.00	1996-04-20 00:00:00	NULL	12	2009-12-31
28	Many	Many	NULL	1993-12-19	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1994-01-01 00:00:00	NULL	-9	2009-01-01
28	Many	Many	NULL	1996-02-06	45975.3616	45975.3616	0.00	NULL	0.02	0.00	0.02	0.00	1996-02-28 00:00:00	NULL	66	2009-01-01
29	Many	Many	NULL	1997-01-30	39341.806	39341.806	NULL	NULL	0.00	0.00	0.00	0.00	1997-01-27 00:00:00	NULL	0	2009-01-01
30	Many	Many	NULL	1994-06-08	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-06-22 00:00:00	NULL	24	2009-01-01
30	Many	Many	NULL	1996-01-15	29770.173	29770.173	NULL	NULL	0.00	0.00	0.00	0.00	1996-01-18 00:00:00	NULL	35	2009-12-31
30	Many	Many	NULL	1998-08-16	44561.46	44561.46	0.00	NULL	0.06	0.00	0.06	0.00	1998-08-14 00:00:00	NULL	34	2009-12-31
31	Many	Many	NULL	1994-02-24	0.0	0.0	0.00	0.00	0.08	0.08	0.08	0.08	1994-02-20 00:00:00	NULL	-19	2009-01-01
31	Many	Many	NULL	1993-11-03	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1993-11-08 00:00:00	NULL	-41	2009-01-01
32	Many	Many	NULL	1995-08-19	63313.3312	63313.3312	0.00	NULL	0.00	0.00	0.00	0.00	1995-08-27 00:00:00	NULL	-41	2009-01-01
32	Many	Many	NULL	1993-12-14	0.0	0.0	0.00	NULL	0.05	0.00	0.05	0.00	1993-12-28 00:00:00	NULL	-7	2009-12-31
32	Many	Many	NULL	1994-08-29	0.0	0.0	0.00	NULL	0.06	0.00	0.06	0.00	1994-08-31 00:00:00	NULL	14	2009-01-01
32	Many	Many	NULL	1996-10-07	44955.15839999999	44955.15839999999	0.00	NULL	0.05	0.00	0.05	0.00	1996-10-14 00:00:00	NULL	-66	2009-12-31
32	Many	Many	NULL	1996-02-04	46146.7488	46146.7488	NULL	NULL	0.00	0.00	0.00	0.00	1996-02-03 00:00:00	NULL	-4	2009-01-01
33	Many	Many	NULL	1998-04-17	54174.12	54174.12	0.00	NULL	0.01	0.00	0.01	0.00	1998-04-15 00:00:00	NULL	26	2009-01-01
34	Many	Many	NULL	1998-03-10	56487.763199999994	56487.763199999994	NULL	NULL	0.00	0.00	0.00	0.00	1998-03-30 00:00:00	NULL	-23	2009-01-01
34	Many	Many	NULL	1996-01-27	63982.002400000005	63982.002400000005	NULL	NULL	0.00	0.00	0.00	0.00	1996-01-27 00:00:00	NULL	21	2009-01-01
34	Many	Many	NULL	1995-11-13	60586.5448	60586.5448	0.00	NULL	0.06	0.00	0.06	0.00	1995-11-26 00:00:00	NULL	-50	2009-01-01
35	Many	Many	NULL	1996-01-21	40475.225	40475.225	0.00	0.00	0.03	0.03	0.03	0.03	1996-01-22 00:00:00	NULL	-32	2009-01-01
36	Many	Many	NULL	1996-04-17	41844.6756	41844.6756	0.00	0.00	0.06	0.06	0.06	0.06	1996-04-20 00:00:00	NULL	52	2009-01-01
37	Many	Many	NULL	1994-02-18	0.0	0.0	0.00	NULL	0.04	0.00	0.04	0.00	1994-02-21 00:00:00	NULL	-23	2009-01-01
37	Many	Many	NULL	1993-04-23	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1993-04-14 00:00:00	NULL	15	2009-12-31
37	Many	Many	NULL	1992-05-02	0.0	0.0	0.00	0.00	0.03	0.03	0.03	0.03	1992-05-02 00:00:00	NULL	-13	2009-01-01
38	Many	Many	NULL	1997-02-02	44694.46	44694.46	0.00	0.00	0.05	0.05	0.05	0.05	1997-02-02 00:00:00	NULL	19	2009-01-01
38	Many	Many	NULL	1996-02-16	68028.3144	68028.3144	NULL	NULL	0.00	0.00	0.00	0.00	1996-02-18 00:00:00	NULL	-6	2009-01-01
39	Many	Many	NULL	1998-02-03	45146.01	45146.01	NULL	NULL	0.00	0.00	0.00	0.00	1998-02-18 00:00:00	NULL	-48	2009-01-01
39	Many	Many	NULL	1992-07-07	0.0	0.0	0.00	0.00	0.02	0.02	0.02	0.02	1992-07-28 00:00:00	NULL	-21	2009-01-01
40	Many	Many	NULL	1996-12-13	51224.736	51224.736	0.00	NULL	0.05	0.00	0.05	0.00	1997-01-01 00:00:00	NULL	71	2009-01-01
40	Many	Many	NULL	1992-07-26	0.0	0.0	0.00	NULL	0.03	0.00	0.03	0.00	1992-08-15 00:00:00	NULL	14	2009-01-01
41	Many	Many	NULL	1998-07-04	47989.6144	47989.6144	0.00	NULL	0.08	0.00	0.08	0.00	1998-07-06 00:00:00	NULL	9	2009-01-01
41	Many	Many	NULL	1994-02-26	0.0	0.0	0.00	NULL	0.07	0.00	0.07	0.00	1994-03-18 00:00:00	NULL	17	2009-01-01
41	Many	Many	NULL	1993-11-14	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1993-11-11 00:00:00	NULL	-74	2009-01-01
42	Many	Many	NULL	1994-08-05	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-08-28 00:00:00	NULL	33	2009-12-31
42	Many	Many	NULL	1996-02-13	68289.9672	68289.9672	0.00	NULL	0.00	0.00	0.00	0.00	1996-02-23 00:00:00	NULL	33	2009-01-01
43	Many	Many	NULL	1996-10-22	62727.3207	62727.3207	0.00	NULL	0.01	0.00	0.01	0.00	1996-10-26 00:00:00	NULL	-19	2009-12-31
43	Many	Many	NULL	1992-07-15	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1992-08-02 00:00:00	NULL	27	2009-01-01
44	Many	Many	NULL	1997-03-23	60781.124800000005	60781.124800000005	NULL	NULL	0.00	0.00	0.00	0.00	1997-04-13 00:00:00	NULL	74	2009-12-31
44	Many	Many	NULL	1996-10-04	80882.4192	80882.4192	0.00	NULL	0.02	0.00	0.02	0.00	1996-09-30 00:00:00	NULL	-48	2009-01-01
44	Many	Many	NULL	1995-09-02	75106.658	75106.658	NULL	NULL	0.00	0.00	0.00	0.00	1995-09-14 00:00:00	NULL	25	2009-01-01
44	Many	Many	NULL	1996-11-19	48941.692800000004	48941.692800000004	0.00	NULL	0.06	0.00	0.06	0.00	1996-12-12 00:00:00	NULL	-3	2009-01-01
45	Many	Many	NULL	1998-03-05	61489.35	61489.35	NULL	NULL	0.00	0.00	0.00	0.00	1998-03-24 00:00:00	NULL	4	2009-01-01
45	Many	Many	NULL	1994-02-07	0.0	0.0	0.00	NULL	0.00	0.00	0.00	0.00	1994-02-23 00:00:00	NULL	50	2009-01-01
46	Many	Many	NULL	1996-01-20	73475.892	73475.892	0.00	NULL	0.07	0.00	0.07	0.00	1996-02-03 00:00:00	NULL	-53	2009-01-01
46	Many	Many	NULL	1998-07-01	56583.5144	56583.5144	0.00	NULL	0.05	0.00	0.05	0.00	1998-07-05 00:00:00	NULL	28	2009-01-01
46	Many	Many	NULL	1998-08-18	84565.5168	84565.5168	0.00	NULL	0.05	0.00	0.05	0.00	1998-08-29 00:00:00	NULL	52	2009-01-01
46	Many	Many	NULL	1996-10-01	77781.4092	77781.4092	NULL	NULL	0.00	0.00	0.00	0.00	1996-10-26 00:00:00	NULL	-54	2009-01-01
48	Many	Many	NULL	1994-08-22	0.0	0.0	0.00	NULL	0.07	0.00	0.07	0.00	1994-09-08 00:00:00	NULL	28	2009-01-01
49	Many	Many	NULL	1993-11-14	0.0	0.0	0.00	0.00	0.00	0.00	0.00	0.00	1993-11-24 00:00:00	NULL	-26	2009-12-31
50	Many	Many	NULL	1994-08-13	0.0	0.0	NULL	NULL	0.00	0.00	0.00	0.00	1994-08-26 00:00:00	NULL	-48	2009-12-31
