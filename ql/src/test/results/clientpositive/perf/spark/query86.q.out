PREHOOK: query: explain
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@web_sales
#### A masked pattern was here ####
POSTHOOK: query: explain
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@web_sales
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Spark
      Edges:
        Reducer 2 <- Map 1 (PARTITION-LEVEL SORT, 154), Map 7 (PARTITION-LEVEL SORT, 154)
        Reducer 3 <- Map 8 (PARTITION-LEVEL SORT, 174), Reducer 2 (PARTITION-LEVEL SORT, 174)
        Reducer 4 <- Reducer 3 (GROUP, 139)
        Reducer 5 <- Reducer 4 (PARTITION-LEVEL SORT, 70)
        Reducer 6 <- Reducer 5 (SORT, 1)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: web_sales
                  Statistics: Num rows: 144002668 Data size: 19580198212 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (ws_sold_date_sk is not null and ws_item_sk is not null) (type: boolean)
                    Statistics: Num rows: 144002668 Data size: 19580198212 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: ws_sold_date_sk (type: int)
                      sort order: +
                      Map-reduce partition columns: ws_sold_date_sk (type: int)
                      Statistics: Num rows: 144002668 Data size: 19580198212 Basic stats: COMPLETE Column stats: NONE
                      value expressions: ws_item_sk (type: int), ws_net_paid (type: decimal(7,2))
        Map 7 
            Map Operator Tree:
                TableScan
                  alias: d1
                  Statistics: Num rows: 73049 Data size: 81741831 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223) (type: boolean)
                    Statistics: Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: d_date_sk (type: int)
                      sort order: +
                      Map-reduce partition columns: d_date_sk (type: int)
                      Statistics: Num rows: 36524 Data size: 40870356 Basic stats: COMPLETE Column stats: NONE
        Map 8 
            Map Operator Tree:
                TableScan
                  alias: item
                  Statistics: Num rows: 462000 Data size: 663560457 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: i_item_sk is not null (type: boolean)
                    Statistics: Num rows: 462000 Data size: 663560457 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: i_item_sk (type: int)
                      sort order: +
                      Map-reduce partition columns: i_item_sk (type: int)
                      Statistics: Num rows: 462000 Data size: 663560457 Basic stats: COMPLETE Column stats: NONE
                      value expressions: i_class (type: string), i_category (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 ws_sold_date_sk (type: int)
                  1 d_date_sk (type: int)
                outputColumnNames: _col0, _col3, _col29, _col37
                Statistics: Num rows: 158402938 Data size: 21538218500 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col3 (type: int)
                  sort order: +
                  Map-reduce partition columns: _col3 (type: int)
                  Statistics: Num rows: 158402938 Data size: 21538218500 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: int), _col29 (type: decimal(7,2)), _col37 (type: int)
        Reducer 3 
            Reduce Operator Tree:
              Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col3 (type: int)
                  1 i_item_sk (type: int)
                outputColumnNames: _col0, _col3, _col29, _col37, _col68, _col78, _col80
                Statistics: Num rows: 174243235 Data size: 23692040863 Basic stats: COMPLETE Column stats: NONE
                Filter Operator
                  predicate: ((_col68 = _col3) and (_col37 = _col0)) (type: boolean)
                  Statistics: Num rows: 43560808 Data size: 5923010113 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col29 (type: decimal(7,2)), _col78 (type: string), _col80 (type: string)
                    outputColumnNames: _col29, _col78, _col80
                    Statistics: Num rows: 43560808 Data size: 5923010113 Basic stats: COMPLETE Column stats: NONE
                    Group By Operator
                      aggregations: sum(_col29)
                      keys: _col80 (type: string), _col78 (type: string), 0 (type: int)
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 130682424 Data size: 17769030339 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int)
                        sort order: +++
                        Map-reduce partition columns: _col0 (type: string), _col1 (type: string), _col2 (type: int)
                        Statistics: Num rows: 130682424 Data size: 17769030339 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col3 (type: decimal(17,2))
        Reducer 4 
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                keys: KEY._col0 (type: string), KEY._col1 (type: string), KEY._col2 (type: int)
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: (grouping(_col2, 0) + grouping(_col2, 1)) (type: tinyint), CASE WHEN ((grouping(_col2, 1) = 0)) THEN (_col0) END (type: string), _col3 (type: decimal(17,2))
                  sort order: ++-
                  Map-reduce partition columns: (grouping(_col2, 0) + grouping(_col2, 1)) (type: tinyint), CASE WHEN ((grouping(_col2, 1) = 0)) THEN (_col0) END (type: string)
                  Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), _col3 (type: decimal(17,2))
        Reducer 5 
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: string), VALUE._col1 (type: string), VALUE._col2 (type: int), VALUE._col3 (type: decimal(17,2))
                outputColumnNames: _col0, _col1, _col2, _col3
                Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                PTF Operator
                  Function definitions:
                      Input definition
                        input alias: ptf_0
                        output shape: _col0: string, _col1: string, _col2: int, _col3: decimal(17,2)
                        type: WINDOWING
                      Windowing table definition
                        input alias: ptf_1
                        name: windowingtablefunction
                        order by: _col3 DESC NULLS LAST
                        partition by: (grouping(_col2, 0) + grouping(_col2, 1)), CASE WHEN ((grouping(_col2, 1) = 0)) THEN (_col0) END
                        raw input shape:
                        window functions:
                            window function definition
                              alias: rank_window_0
                              arguments: _col3
                              name: rank
                              window function: GenericUDAFRankEvaluator
                              window frame: PRECEDING(MAX)~FOLLOWING(MAX)
                              isPivotResult: true
                  Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                  Select Operator
                    expressions: _col3 (type: decimal(17,2)), _col0 (type: string), _col1 (type: string), (grouping(_col2, 0) + grouping(_col2, 1)) (type: tinyint), rank_window_0 (type: int)
                    outputColumnNames: _col0, _col1, _col2, _col3, _col4
                    Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: _col3 (type: tinyint), CASE WHEN ((_col3 = 0)) THEN (_col1) END (type: string), _col4 (type: int)
                      sort order: -++
                      Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                      TopN Hash Memory Usage: 0.1
                      value expressions: _col0 (type: decimal(17,2)), _col1 (type: string), _col2 (type: string)
        Reducer 6 
            Reduce Operator Tree:
              Select Operator
                expressions: VALUE._col0 (type: decimal(17,2)), VALUE._col1 (type: string), VALUE._col2 (type: string), KEY.reducesinkkey0 (type: tinyint), KEY.reducesinkkey2 (type: int)
                outputColumnNames: _col0, _col1, _col2, _col3, _col4
                Statistics: Num rows: 65341212 Data size: 8884515169 Basic stats: COMPLETE Column stats: NONE
                Limit
                  Number of rows: 100
                  Statistics: Num rows: 100 Data size: 13500 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 100 Data size: 13500 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 100
      Processor Tree:
        ListSink

